{"version":3,"sources":["util.js","components/input.js","components/select.js","components/group.js","components/form.js","components/actionButton.js","components/educationField.js","components/item.js","components/list.js","components/experience.js","components/education.js","components/personalInfoField.js","components/personalInfoContent.js","components/personal.js","components/job.js","App.js","reportWebVitals.js","index.js"],"names":["capitalize","string","charAt","toUpperCase","slice","getSelectType","search","fakeDeepCopy","original","JSON","parse","stringify","getKeys","obj","Object","keys","reduce","res","el","Array","isArray","Input","this","props","field","name","replace","trim","form","val","forEach","group","fields","value","handleChange","e","length","FormContext","Consumer","className","setClassControl","labelText","labelFormatted","type","onChange","onChangeHandler","getValue","placeholder","checked","required","Component","Select","state","year","format","fn","dateFns","month","date","index","dates","i","push","Date","startsWith","map","getOption","Group","str","arr","findIndex","getGroupName","id","subName","uniqid","hasSubGroup","subGroups","slitGroup","Form","aux","defaultForm","bind","names","split","fieldIndex","indexes","findIndexes","target","setState","startFields","restFields","eduId","submitHandler","action","onSubmit","getSubmitHandler","undefined","Provider","timePeriodCompleted","completed","hideForm","onClick","React","createContext","ActionButton","ActionsContext","actionsSettings","btnType","class","icon","EducationField","actionBtnTypes","ids","edit","delete","isValid","isFuture","isEqual","lastDayOfYear","item","degree","position","school","company","mainTask","timePeriodFormatted","timePeriod","start","end","getTitle","renderMainTask","getName","Item","educaiton","isEditing","EventHandlers","editExperience","updateExperience","toggleIsEditing","List","items","Experience","typeExperience","experience","addExperience","deleteExperience","toggleIsAdding","blankExperience","updatedExperience","key","getDate","dateVal","from","regex","RegExp","test","addYears","getYear","preventDefault","prevState","isAdding","experienceInfo","fillExperience","edu","find","falseDeep","includes","getMonth","newExperienceInfo","filter","faEdit","faTrash","faPlusSquare","EducationInformation","PersonalInfoField","IsContact","iconName","text","PersonalInfoContent","personalInfo","firstName","lastName","location","city","country","contact","phoneNumber","faPhoneSquare","email","faAt","Personal","handleSubmit","toggleEdit","Job","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4aef7ae4.chunk.js","sourcesContent":["function capitalize(string) {\n  return string.charAt(0).toUpperCase() + string.slice(1);\n}\n\nfunction getSelectType(string) {\n  return string.slice(string.search(/\\./) + 1);\n}\n\nfunction fakeDeepCopy(original) {\n  // ADD PROPER DEEP COPY IF ADDED FUNCTIONS OR COMPLEX VALUES (DATE/NaN) TO original\n  return JSON.parse(JSON.stringify(original));\n}\n\nfunction getKeys(obj) {\n  return Object.keys(obj).reduce((res, el) => {\n    if (el === \"id\") {\n      return res;\n    }\n    if (Array.isArray(obj[el])) {\n      return res;\n    } else if (typeof obj[el] === \"object\" && obj[el] !== null) {\n      return [...res, ...getKeys(obj[el])];\n    }\n    return [...res, el];\n  }, []);\n}\n\nexport { capitalize, getSelectType, fakeDeepCopy, getKeys };\n","import { Component } from \"react\";\nimport { capitalize } from \"../util\";\nimport { FormContext } from \"./form\";\n\nclass Input extends Component {\n  labelFormatted() {\n    let label = this.props.field.name.replace(/([A-Z])/g, \" $1\").trim();\n    return capitalize(label);\n  }\n\n  getValue(form, name) {\n    let val;\n    form.forEach((group) => {\n      group.fields.forEach((field) => {\n        if (field.name === name) {\n          val = field.value;\n        }\n      });\n    });\n    return val;\n  }\n\n  setClassControl() {\n    if (this.props.field.name === \"phoneNumber\") {\n      return \"control flex-grow-0 w-40\";\n    }\n    return \"control\";\n  }\n\n  onChangeHandler(form, handleChange, e) {\n    if (form.length !== 0) {\n      handleChange(e);\n    } else {\n      this.props.handleChange(e);\n    }\n  }\n\n  render() {\n    return (\n      <FormContext.Consumer>\n        {({ form, handleChange }) => (\n          <div className={this.setClassControl()}>\n            <label>\n              <div className=\"label-title\">\n                {this.props.field.labelText\n                  ? this.props.field.labelText\n                  : this.labelFormatted()}\n              </div>\n              <input\n                type={this.props.field.type}\n                name={this.props.field.name}\n                onChange={(e) => this.onChangeHandler(form, handleChange, e)}\n                value={this.getValue(\n                  form.length !== 0 ? form : this.props.form,\n                  this.props.field.name\n                )}\n                placeholder={this.props.field.placeholder}\n                checked={this.props.field.labelText}\n                required\n              />\n            </label>\n          </div>\n        )}\n      </FormContext.Consumer>\n    );\n  }\n}\n\nexport default Input;\n","import * as dateFns from \"date-fns\";\nimport { Component } from \"react\";\nimport { capitalize } from \"../util\";\nimport { FormContext } from \"./form\";\n\nclass Select extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      year: {\n        length: 100,\n        format: \"yyyy\",\n        fn: dateFns.subYears,\n      },\n      month: {\n        length: 12,\n        format: \"MMMM\",\n        fn: dateFns.addMonths,\n      },\n    };\n  }\n\n  getOption(date, index) {\n    return (\n      <option\n        key={index}\n        value={dateFns[\"get\" + capitalize(this.props.type)](date)}\n      >\n        {dateFns.format(date, this.state[this.props.type].format)}\n      </option>\n    );\n  }\n\n  render() {\n    const dates = [];\n    for (let i = 0; i < this.state[this.props.type].length; i++) {\n      dates.push(this.state[this.props.type].fn(new Date(2021, 0, 1), i));\n    }\n\n    return (\n      <FormContext.Consumer>\n        {({ handleChange }) => {\n          return (\n            <select\n              name={this.props.name}\n              value={this.props.value}\n              onChange={handleChange}\n            >\n              <option value=\"\">-- No Specified --</option>\n              {this.props.name.startsWith(\"endDate\") && (\n                <option value=\"-1\">-- Present</option>\n              )}\n              {dates.map((date, index) => this.getOption(date, index))}\n            </select>\n          );\n        }}\n      </FormContext.Consumer>\n    );\n  }\n}\n\nexport default Select;\n","import { Component } from \"react\";\nimport uniqid from \"uniqid\";\nimport { capitalize, getSelectType } from \"../util\";\nimport Input from \"./input\";\nimport Select from \"./select\";\n\nclass Group extends Component {\n  getGroupName(str) {\n    return str.slice(0, str.search(/[A-Z]/));\n  }\n\n  slitGroup() {\n    const arr = [];\n    this.props.group.fields.forEach((field) => {\n      const index = arr.findIndex(\n        (obj) => obj.name === this.getGroupName(field.name)\n      );\n\n      if (index !== -1) {\n        arr[index].fields.push({\n          id: field.id,\n          name: `${field.name}.${field.subName}`,\n          type: \"select\",\n          value: field.value,\n        });\n      } else {\n        arr.push({\n          id: uniqid(),\n          name: this.getGroupName(field.name),\n          fields: [\n            {\n              id: field.id,\n              name: `${field.name}.${field.subName}`,\n              type: \"select\",\n              value: field.value,\n            },\n          ],\n        });\n      }\n    });\n    return arr;\n  }\n\n  render() {\n    if (this.props.group.hasSubGroup) {\n      const subGroups = this.slitGroup();\n      return (\n        <fieldset className=\"group-control field-container gap-0 block flex-wrap\">\n          <legend>{this.props.group.name}</legend>\n          {subGroups.map((group) => (\n            <Group key={group.id} group={group} />\n          ))}\n        </fieldset>\n      );\n    }\n\n    return (\n      <fieldset className={\"group-control field-container\"}>\n        <legend>{capitalize(this.props.group.name)}</legend>\n        {this.props.group.fields.map((field) => {\n          if (field.type && field.type === \"select\") {\n            return (\n              <Select\n                key={field.id}\n                name={field.name}\n                type={getSelectType(field.name)}\n                value={field.value}\n              />\n            );\n          }\n\n          return <Input key={field.id} field={field} />;\n        })}\n      </fieldset>\n    );\n  }\n}\n\nexport default Group;\n","import React, { Component } from \"react\";\nimport uniqid from \"uniqid\";\nimport { fakeDeepCopy } from \"../util\";\nimport Group from \"./group\";\nimport Input from \"./input\";\n\nclass Form extends Component {\n  constructor(props) {\n    super(props);\n    const aux = { form: fakeDeepCopy(this.props.defaultForm) };\n    aux.form.forEach((group) => {\n      group.id = uniqid();\n      group.fields.forEach((field) => (field.id = uniqid()));\n    });\n\n    this.state = aux;\n\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  findIndexes(name) {\n    const names = name.split(\".\");\n    return this.state.form.reduce((i, group, index) => {\n      const fieldIndex = group.fields.findIndex((field) => {\n        if (names.length === 1) {\n          return field.name === names[0];\n        }\n        return field.name === names[0] && field.subName === names[1];\n      });\n      if (fieldIndex !== -1) {\n        i.group = index;\n        i.field = fieldIndex;\n      }\n      return i;\n    }, {});\n  }\n\n  handleChange(e) {\n    const indexes = this.findIndexes(e.target.name);\n\n    this.setState(({ form }) => {\n      const startFields = form[indexes.group].fields.slice(0, indexes.field);\n      const restFields = form[indexes.group].fields.slice(indexes.field + 1);\n\n      return {\n        form: [\n          ...form.slice(0, indexes.group),\n          {\n            ...form[indexes.group],\n            fields: [\n              ...startFields,\n              {\n                ...form[indexes.group].fields[indexes.field],\n                value: e.target.value,\n              },\n              ...restFields,\n            ],\n          },\n          ...form.slice(indexes.group + 1),\n        ],\n      };\n    });\n  }\n\n  getSubmitHandler(e) {\n    if (this.props.eduId) {\n      return this.props.submitHandler(e, this.props.eduId);\n    }\n    return this.props.submitHandler(e);\n  }\n\n  render() {\n    return (\n      <form\n        action=\"#\"\n        onSubmit={(e) => this.getSubmitHandler(e)}\n        className=\"info-container\"\n      >\n        {this.state.form.map((group) => {\n          if (group.name === undefined) {\n            return (\n              <Input\n                key={group.fields[0].id}\n                field={group.fields[0]}\n                form={this.state.form}\n                handleChange={this.handleChange}\n              />\n            );\n          }\n          return (\n            <FormContext.Provider\n              key={group.id}\n              value={{ form: this.state.form, handleChange: this.handleChange }}\n            >\n              <Group group={group} timePeriodCompleted={group.completed} />\n            </FormContext.Provider>\n          );\n        })}\n\n        <div className=\"btn-form-group transition-state\">\n          {this.props.hideForm && (\n            <button\n              onClick={\n                this.props.eduId\n                  ? () => this.props.hideForm(this.props.eduId)\n                  : this.props.hideForm\n              }\n              className=\"btn-form btn-cancel transition-state\"\n            >\n              Cancel\n            </button>\n          )}\n          <button\n            type=\"submit\"\n            className=\"btn-form btn-submit transition-state\"\n          >\n            Save\n          </button>\n        </div>\n      </form>\n    );\n  }\n}\n\nexport const FormContext = React.createContext({\n  form: [],\n  handleChange: () => {},\n});\n\nexport default Form;\n","import { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { ActionsContext } from \"./experience\";\n\nfunction ActionButton(props) {\n  return (\n    <ActionsContext.Consumer>\n      {({ actionsSettings }) => (\n        <button\n          className={\n            \"transition-state btn \" + actionsSettings[props.btnType].class\n          }\n          onClick={() => {\n            actionsSettings[props.btnType].action(props.id);\n          }}\n        >\n          <div className=\"icon-container\">\n            <FontAwesomeIcon icon={actionsSettings[props.btnType].icon} />\n          </div>\n        </button>\n      )}\n    </ActionsContext.Consumer>\n  );\n}\n\nexport default ActionButton;\n","import { format, isEqual, isFuture, isValid, lastDayOfYear } from \"date-fns\";\nimport { Component } from \"react\";\nimport uniqid from \"uniqid\";\nimport ActionButton from \"./actionButton\";\n\nclass EducationField extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      actionBtnTypes: [\"edit\", \"delete\"],\n      ids: { edit: uniqid(), delete: uniqid() },\n    };\n  }\n\n  timePeriodFormatted(date) {\n    if (!isValid(date)) {\n      return \"Unknown\";\n    }\n    if (isFuture(date)) {\n      return \"Present\";\n    }\n    if (isEqual(lastDayOfYear(date), date)) {\n      return format(date, \"yyyy\");\n    }\n\n    return format(date, \"MM-yyyy\");\n  }\n\n  getTitle() {\n    if (this.props.item.degree) {\n      return this.props.item.degree;\n    }\n    return this.props.item.position;\n  }\n\n  getName() {\n    if (this.props.item.school) {\n      return this.props.item.school;\n    }\n    return this.props.item.company;\n  }\n\n  renderMainTask() {\n    return <p className=\"px-1\">{this.props.item.mainTask}</p>;\n  }\n\n  render() {\n    return (\n      <li className=\"flex justify-between m-2 px-4 py-2 border border-solid border-blue-200 rounded-md bg-gray-200\">\n        <article>\n          <div className=\" text-sm text-gray-800\">\n            <span>\n              {this.timePeriodFormatted(this.props.item.timePeriod.start)}\n            </span>{\" \"}\n            /{\" \"}\n            <span>\n              {this.timePeriodFormatted(this.props.item.timePeriod.end)}\n            </span>\n          </div>\n          <h2 className=\"text-xl font-bold\">{this.getTitle()}</h2>\n          {this.props.item.mainTask && this.renderMainTask()}\n          <p className=\"px-1 text-sm font-light\">{this.getName()}</p>\n        </article>\n        <div className=\"flex items-start gap-2\">\n          {this.state.actionBtnTypes.map((type) => (\n            <ActionButton\n              key={this.state.ids[type]}\n              btnType={type}\n              id={this.props.item.id}\n            />\n          ))}\n        </div>\n      </li>\n    );\n  }\n}\n\nexport default EducationField;\n","import { EventHandlers } from \"./experience\";\nimport EducationField from \"./educationField\";\nimport Form from \"./form\";\n\nfunction Item(props) {\n  if (props.educaiton.isEditing) {\n    return (\n      <EventHandlers.Consumer>\n        {({ editExperience, updateExperience, toggleIsEditing }) => {\n          return (\n            <Form\n              eduId={props.educaiton.id}\n              defaultForm={editExperience(props.educaiton.id)}\n              submitHandler={updateExperience}\n              hideForm={toggleIsEditing}\n            />\n          );\n        }}\n      </EventHandlers.Consumer>\n    );\n  }\n  return <EducationField item={props.educaiton} />;\n}\n\nexport default Item;\n","import Item from \"./item\";\n\nfunction List(props) {\n  return (\n    <ul>\n      {props.items.map((item) => (\n        <Item key={item.id} educaiton={item} />\n      ))}\n    </ul>\n  );\n}\n\nexport default List;\n","import uniqid from \"uniqid\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport React, { Component } from \"react\";\nimport { fakeDeepCopy, getKeys, getSelectType } from \"../util\";\nimport Form from \"./form\";\nimport { faEdit, faTrash } from \"@fortawesome/free-solid-svg-icons\";\nimport { faPlusSquare } from \"@fortawesome/free-regular-svg-icons\";\nimport { addYears, getMonth, getYear, isFuture } from \"date-fns\";\nimport List from \"./list\";\nimport isEqual from \"date-fns/isEqual\";\nimport lastDayOfYear from \"date-fns/lastDayOfYear\";\n\nexport const ActionsContext = React.createContext({\n  id: \"\",\n  actionsSettings: {},\n});\n\nexport const EventHandlers = React.createContext({\n  editExperience: () => {},\n  updateExperience: () => {},\n  toggleIsEditing: () => {},\n});\n\n/**\n *\n * Component that represent experiences sections on a resume. Can be: educational or practical.\n *\n */\n\nclass Experience extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      typeExperience: this.props.typeExperience,\n    };\n    this.state = {\n      ...this.state,\n      ...fakeDeepCopy(this.props.experience),\n    };\n\n    this.addExperience = this.addExperience.bind(this);\n    this.editExperience = this.editExperience.bind(this);\n    this.deleteExperience = this.deleteExperience.bind(this);\n    this.toggleIsAdding = this.toggleIsAdding.bind(this);\n    this.toggleIsEditing = this.toggleIsEditing.bind(this);\n    this.updateExperience = this.updateExperience.bind(this);\n  }\n\n  /**\n   * Creates an new experience from blankExperience, puts the values of the form into the new object.\n   * @param {*} form Submited form.\n   * @returns Filled experience.\n   */\n\n  fillExperience(form) {\n    const keys = getKeys(this.state.blankExperience);\n    const updatedExperience = fakeDeepCopy(this.state.blankExperience);\n\n    keys.forEach((key) => {\n      if (key === \"start\" || key === \"end\") {\n        updatedExperience.timePeriod[key] = this.getDate(form, key + \"Date\");\n      } else {\n        updatedExperience[key] = form[key].value;\n      }\n    });\n\n    return updatedExperience;\n  }\n\n  /**\n   * Gets a Date object from the values submited with selects. Its create a object to get both values: month and year.\n   * The object has this structure => { month: number, year: number}\n   *\n   *\n   * @param {*} form Submited form\n   * @param {*} name Name of the select\n   * @returns A date. Possible dates:\n   *  - Values are -1 => A date in the future.\n   *  - Missing month with year => last day of the year.\n   *  - Missing year with month => Current year is assumed.\n   *  - No missing values => Date with these values.\n   */\n\n  getDate(form, name) {\n    const dateVal = Array.from(form).reduce((obj, field) => {\n      const regex = new RegExp(name);\n      if (field.name && regex.test(field.name)) {\n        const type = getSelectType(field.name);\n        obj[type] = field.value;\n      }\n      return obj;\n    }, {});\n\n    if (dateVal.year === \"-1\" && dateVal.month === \"-1\") {\n      return addYears(new Date(), 5);\n    }\n\n    if (dateVal.year !== \"\" && dateVal.month === \"\") {\n      return new Date(dateVal.year, 11, 31);\n    }\n\n    if (dateVal.year === \"\" && dateVal.month !== \"\") {\n      return new Date(getYear(new Date()), dateVal.month);\n    }\n\n    if (dateVal.year !== \"\" && dateVal.month !== \"\") {\n      return new Date(dateVal.year, dateVal.month);\n    }\n  }\n\n  /**\n   *  Create a new Experience. it's added to state.\n   *\n   * @param {*} e  Form's submit event.\n   */\n\n  addExperience(e) {\n    e.preventDefault();\n\n    this.setState((prevState) => {\n      return {\n        isAdding: false,\n        experienceInfo: [\n          ...prevState.experienceInfo,\n          {\n            id: uniqid(),\n            isEditing: false,\n            ...this.fillExperience(e.target),\n          },\n        ],\n      };\n    });\n  }\n\n  /**\n   * Prepare a experience item to be edited. It find the experience to be edited by id,\n   * makes a copy of the form and puts the values of the experience on it.\n   *\n   * @param {string} id ID of the experience to be edited.\n   * @returns Form with values of the experience.\n   *\n   */\n  editExperience(id) {\n    const edu = this.state.experienceInfo.find((e) => e.id === id);\n    let falseDeep = fakeDeepCopy(this.state.form);\n    const keys = getKeys(this.state.blankExperience);\n    keys.forEach((key) => {\n      falseDeep.forEach((group) => {\n        group.fields.forEach((field) => {\n          if (field.name.includes(key)) {\n            if (field.subName && field.subName === \"month\") {\n              if (isFuture(edu.timePeriod[key])) {\n                return (field.value = \"-1\");\n              }\n              if (\n                isEqual(lastDayOfYear(edu.timePeriod[key]), edu.timePeriod[key])\n              ) {\n                return (field.value = \"\");\n              }\n              if (edu.timePeriod[key] === undefined) {\n                return (field.value = \"\");\n              }\n              return (field.value = getMonth(edu.timePeriod[key]));\n            }\n            if (field.subName && field.subName === \"year\") {\n              if (isFuture(edu.timePeriod[key])) {\n                return (field.value = \"-1\");\n              }\n              if (edu.timePeriod[key] === undefined) {\n                return (field.value = \"\");\n              }\n              return (field.value = getYear(edu.timePeriod[key]));\n            }\n            return (field.value = edu[key]);\n          }\n        });\n      });\n    });\n    return falseDeep;\n  }\n\n  /**\n   * Update an existing experience. It's destructured into the current state.\n   *\n   * @param {*} e  Form's submit event.\n   */\n\n  updateExperience(e, id) {\n    this.setState(({ experienceInfo }) => {\n      const index = experienceInfo.findIndex((edu) => edu.id === id);\n\n      return {\n        experienceInfo: [\n          ...experienceInfo.slice(0, index),\n          {\n            ...experienceInfo[index],\n            isEditing: false,\n            ...this.fillExperience(e.target),\n          },\n          ...experienceInfo.slice(index + 1),\n        ],\n      };\n    });\n  }\n\n  /**\n   * Delete an existing experience by setting a filtered previous state to state.\n   *\n   * @param {string} id ID of experience to be deleted.\n   */\n\n  deleteExperience(id) {\n    this.setState((prevState) => {\n      const newExperienceInfo = prevState.experienceInfo.filter(\n        (edu) => edu.id !== id\n      );\n      if (newExperienceInfo.length === 0) {\n        return {\n          isAdding: true,\n          experienceInfo: newExperienceInfo,\n        };\n      }\n      return {\n        experienceInfo: newExperienceInfo,\n      };\n    });\n  }\n\n  toggleIsAdding() {\n    this.setState((prevState) => ({\n      isAdding: !prevState.isAdding,\n    }));\n  }\n\n  toggleIsEditing(id) {\n    this.setState(({ experienceInfo }) => {\n      const index = experienceInfo.findIndex((edu) => edu.id === id);\n      return {\n        experienceInfo: [\n          ...experienceInfo.slice(0, index),\n          {\n            ...experienceInfo[index],\n            isEditing: !experienceInfo[index].isEditing,\n          },\n          ...experienceInfo.slice(index + 1),\n        ],\n      };\n    });\n  }\n\n  render() {\n    return (\n      <article className=\"info-container\">\n        <h2 className=\"title\">{this.state.typeExperience} Experience</h2>\n        {this.state.isAdding && (\n          <Form\n            defaultForm={this.state.form}\n            submitHandler={this.addExperience}\n            hideForm={\n              this.state.experienceInfo.length > 0 && this.toggleIsAdding\n            }\n          />\n        )}\n        {this.state.experienceInfo.length > 0 && (\n          <ActionsContext.Provider\n            value={{\n              actionsSettings: {\n                edit: {\n                  action: this.toggleIsEditing,\n                  icon: faEdit,\n                  class: \"btn-edit\",\n                },\n                delete: {\n                  action: this.deleteExperience,\n                  icon: faTrash,\n                  class: \"btn-delete\",\n                },\n              },\n            }}\n          >\n            <EventHandlers.Provider\n              value={{\n                editExperience: this.editExperience,\n                updateExperience: this.updateExperience,\n                toggleIsEditing: this.toggleIsEditing,\n              }}\n            >\n              <List items={this.state.experienceInfo} />\n            </EventHandlers.Provider>\n          </ActionsContext.Provider>\n        )}\n\n        {!this.state.isAdding && (\n          <button\n            onClick={this.toggleIsAdding}\n            className=\"btn transition-state block m-3 ml-auto text-xl text-indigo-500 hover:text-indigo-700\"\n          >\n            <div className=\"icon-container\">\n              <FontAwesomeIcon icon={faPlusSquare} />\n            </div>\n          </button>\n        )}\n      </article>\n    );\n  }\n}\n\nexport default Experience;\n","import React, { Component } from \"react\";\nimport Experience from \"./experience\";\n\nclass EducationInformation extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isAdding: true,\n      experienceInfo: [],\n      form: [\n        {\n          fields: [\n            {\n              name: \"school\",\n              placeholder: \"University of Bologna\",\n              value: \"\",\n            },\n          ],\n        },\n        {\n          fields: [\n            {\n              name: \"degree\",\n              placeholder: \"Computer Science\",\n              value: \"\",\n            },\n          ],\n        },\n        {\n          hasSubGroup: true,\n          completed: true,\n          name: \"Period of study\",\n          fields: [\n            {\n              name: \"startDate\",\n              subName: \"month\",\n              type: \"select\",\n              value: \"\",\n            },\n            {\n              name: \"startDate\",\n              subName: \"year\",\n              type: \"select\",\n              value: \"\",\n            },\n            {\n              name: \"endDate\",\n              subName: \"month\",\n              type: \"select\",\n              value: \"\",\n            },\n            {\n              name: \"endDate\",\n              subName: \"year\",\n              type: \"select\",\n              value: \"\",\n            },\n          ],\n        },\n      ],\n      blankExperience: {\n        school: \"\",\n        degree: \"\",\n        timePeriod: {\n          start: \"\",\n          end: \"\",\n        },\n      },\n    };\n  }\n\n  render() {\n    return (\n      <Experience typeExperience={\"Educational\"} experience={this.state} />\n    );\n  }\n}\n\nexport default EducationInformation;\n","import { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { Component } from \"react\";\nimport { capitalize } from \"../util\";\n\nclass PersonalInfoField extends Component {\n  labelFormatted() {\n    let label = this.props.type.name.replace(/([A-Z])/g, \" $1\").trim();\n    return capitalize(label);\n  }\n  render() {\n    if (this.props.IsContact) {\n      return (\n        <li>\n          <span className=\"fa-li text-gray-500\">\n            <FontAwesomeIcon icon={this.props.iconName} />\n          </span>\n          <span className=\"align-top\">{this.props.text}</span>\n        </li>\n      );\n    } else {\n      return <span>{this.props.text}</span>;\n    }\n  }\n}\n\nexport default PersonalInfoField;\n","import { faAt, faPhoneSquare } from \"@fortawesome/free-solid-svg-icons\";\nimport PersonalInfoField from \"./personalInfoField\";\n\nfunction PersonalInfoContent(props) {\n  return (\n    <div>\n      <section className=\"field-container\">\n        <h3>Full Name</h3>\n        <p>\n          <PersonalInfoField\n            text={props.personalInfo.firstName}\n            isEditing={false}\n          />{\" \"}\n          <PersonalInfoField\n            text={props.personalInfo.lastName}\n            isEditing={false}\n          />\n        </p>\n      </section>\n      <section className=\"field-container\">\n        <h3>Current Location</h3>\n        <p>\n          <PersonalInfoField\n            text={props.personalInfo.location.city}\n            isEditing={false}\n          />\n          {\", \"}\n          <PersonalInfoField\n            text={props.personalInfo.location.country}\n            isEditing={false}\n          />\n        </p>\n      </section>\n      <section className=\"field-container\">\n        <h3>Contact</h3>\n        <ul className=\"fa-ul\">\n          <PersonalInfoField\n            text={props.personalInfo.contact.phoneNumber}\n            isEditing={false}\n            IsContact={true}\n            iconName={faPhoneSquare}\n          />\n          <PersonalInfoField\n            text={props.personalInfo.contact.email}\n            isEditing={false}\n            IsContact={true}\n            iconName={faAt}\n          />\n        </ul>\n      </section>\n    </div>\n  );\n}\n\nexport default PersonalInfoContent;\n","import { Component } from \"react\";\nimport { faEdit } from \"@fortawesome/free-solid-svg-icons\";\nimport Form from \"./form\";\nimport PersonalInfoContent from \"./personalInfoContent\";\nimport ActionButton from \"./actionButton\";\nimport { ActionsContext } from \"./experience\";\nimport { fakeDeepCopy } from \"../util\";\n\nclass Personal extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      isAdding: true,\n      isEditing: false,\n      personalInfo: {\n        firstName: \"\",\n        lastName: \"\",\n        location: {\n          city: \"\",\n          country: \"\",\n        },\n        contact: {\n          phoneNumber: \"\",\n          email: \"\",\n        },\n      },\n      form: [\n        {\n          name: \"Full Name\",\n          fields: [\n            {\n              name: \"firstName\",\n              placeholder: \"John\",\n              value: \"\",\n            },\n            {\n              name: \"lastName\",\n              placeholder: \"Doe\",\n              value: \"\",\n            },\n          ],\n        },\n        {\n          name: \"Current Location\",\n          fields: [\n            {\n              name: \"city\",\n              placeholder: \"Madrid\",\n              value: \"\",\n            },\n            {\n              name: \"country\",\n              placeholder: \"Spain\",\n              value: \"\",\n            },\n          ],\n        },\n        {\n          name: \"Contact\",\n          fields: [\n            {\n              name: \"phoneNumber\",\n              value: \"\",\n              type: \"tel\",\n              placeholder: \"XXX XX XX XX\",\n            },\n            {\n              name: \"email\",\n              placeholder: \"johnDoe@example.com\",\n              value: \"\",\n              type: \"email\",\n            },\n          ],\n        },\n      ],\n    };\n\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.toggleEdit = this.toggleEdit.bind(this);\n  }\n\n  handleSubmit(e) {\n    e.preventDefault();\n    this.setState({\n      isAdding: false,\n      isEditing: false,\n      personalInfo: {\n        firstName: e.target[\"firstName\"].value,\n        lastName: e.target[\"lastName\"].value,\n        location: {\n          city: e.target[\"city\"].value,\n          country: e.target[\"country\"].value,\n        },\n        contact: {\n          phoneNumber: e.target[\"phoneNumber\"].value,\n          email: e.target[\"email\"].value,\n        },\n      },\n    });\n  }\n\n  edit() {\n    let falseDeep = fakeDeepCopy(this.state.form);\n    falseDeep[0].fields[0].value = this.state.personalInfo.firstName;\n    falseDeep[0].fields[1].value = this.state.personalInfo.lastName;\n    falseDeep[1].fields[0].value = this.state.personalInfo.location.city;\n    falseDeep[1].fields[1].value = this.state.personalInfo.location.country;\n    falseDeep[2].fields[0].value = this.state.personalInfo.contact.phoneNumber;\n    falseDeep[2].fields[1].value = this.state.personalInfo.contact.email;\n\n    return falseDeep;\n  }\n\n  toggleEdit() {\n    this.setState((prevState) => ({ isEditing: !prevState.isEditing }));\n  }\n\n  render() {\n    return (\n      <article className=\"info-container\">\n        <h2 className=\"title\">\n          <span>Personal Info.</span>\n          {!this.state.isEditing && !this.state.isAdding && (\n            <ActionsContext.Provider\n              value={{\n                actionsSettings: {\n                  edit: {\n                    action: this.toggleEdit,\n                    icon: faEdit,\n                    class: \"btn-edit\",\n                  },\n                },\n              }}\n            >\n              <ActionButton btnType=\"edit\" />\n            </ActionsContext.Provider>\n          )}\n        </h2>\n        {this.state.isAdding || this.state.isEditing ? (\n          <Form\n            submitHandler={this.handleSubmit}\n            defaultForm={this.state.isEditing ? this.edit() : this.state.form}\n            hideForm={this.state.isEditing && this.toggleEdit}\n          />\n        ) : (\n          <PersonalInfoContent personalInfo={this.state.personalInfo} />\n        )}\n      </article>\n    );\n  }\n}\n\nexport default Personal;\n","import React, { Component } from \"react\";\nimport Experience from \"./experience\";\n\nclass Job extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isAdding: true,\n      experienceInfo: [],\n      form: [\n        {\n          fields: [\n            {\n              name: \"company\",\n              placeholder: \"GitHub \",\n              value: \"\",\n            },\n          ],\n        },\n        {\n          fields: [\n            {\n              name: \"position\",\n              placeholder: \"Software Engineer\",\n              value: \"\",\n            },\n          ],\n        },\n        {\n          fields: [\n            {\n              name: \"mainTask\",\n              value: \"\",\n            },\n          ],\n        },\n        {\n          hasSubGroup: true,\n          completed: true,\n          name: \"Period in the company\",\n          fields: [\n            {\n              name: \"startDate\",\n              subName: \"month\",\n              type: \"select\",\n              value: \"\",\n            },\n            {\n              name: \"startDate\",\n              subName: \"year\",\n              type: \"select\",\n              value: \"\",\n            },\n            {\n              name: \"endDate\",\n              subName: \"month\",\n              type: \"select\",\n              value: \"\",\n            },\n            {\n              name: \"endDate\",\n              subName: \"year\",\n              type: \"select\",\n              value: \"\",\n            },\n          ],\n        },\n      ],\n      blankExperience: {\n        position: \"\",\n        company: \"\",\n        mainTask: \"\",\n        timePeriod: {\n          start: \"\",\n          end: \"\",\n        },\n      },\n    };\n  }\n\n  render() {\n    return <Experience typeExperience={\"Practical\"} experience={this.state} />;\n  }\n}\n\nexport default Job;\n","import { Component } from \"react\";\nimport Education from \"./components/education\";\nimport Personal from \"./components/personal\";\nimport Job from \"./components/job\";\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"mx-auto max-w-half\">\n        <Personal />\n        <Education />\n        <Job />\n      </div>\n    );\n  }\n}\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./styles/index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}